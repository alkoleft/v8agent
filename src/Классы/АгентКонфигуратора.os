#Использовать clientSSH
#Использовать v8runner
#Использовать fs

Перем Конфигуратор;
Перем ПараметрыАгента;
Перем ПараметрыАвторизации;
Перем ЛогАгента;

Перем КлиентSSH;
Перем ПотокSSH;
Перем Лог;
Перем ПараметрыРаботы;

Процедура ПриСозданииОбъекта()

	Лог = МенеджерПакета.ПолучитьЛог();

	ПараметрыРаботы = Новый Структура();

	ПараметрыАгента = Новый Структура("Адрес, Порт, БазовыйКаталог, КлючSSH, СтрокаПодключения, ВерсияПлатформы");
	ПараметрыАгента.Адрес = "127.0.0.1";
	ПараметрыАгента.Порт = 1543;

	ПараметрыАвторизации = Новый Структура("Пользователь, Пароль", "", "");

КонецПроцедуры

#Область Настройка

Функция УстановитьПараметрыБазы(Знач СтрокаПодключения, Знач ВерсияПлатформы = "", Знач БазовыйКаталог = "") Экспорт

	ПараметрыАгента.СтрокаПодключения = СтрокаПодключения;
	ПараметрыАгента.ВерсияПлатформы = ВерсияПлатформы;
	ПараметрыАгента.БазовыйКаталог = БазовыйКаталог;

	Возврат ЭтотОбъект;

КонецФункции

Функция УстановитьПараметрыАвторизации(Знач Пользователь, Знач Пароль) Экспорт

	ПараметрыАвторизации.Пользователь = Пользователь;
	ПараметрыАвторизации.Пароль = Пароль;
	
	Возврат ЭтотОбъект;

КонецФункции

Функция УстановитьПараметрыПодключения(Знач Адрес = "127.0.0.1", Знач Порт = 1543) Экспорт

	ПараметрыАгента.Адрес = Адрес;
	ПараметрыАгента.Порт = Порт;

	Возврат ЭтотОбъект;

КонецФункции

#КонецОбласти

#Область УправлениеАгентом

Функция Запустить() Экспорт

	Если Конфигуратор = Неопределено Тогда

		ЛогАгента = ПолучитьИмяВременногоФайла();

		Конфигуратор = Новый УправлениеКонфигуратором();
		Конфигуратор.УстановитьПризнакОжиданияВыполненияПрограммы(Ложь);
		Конфигуратор.УстановитьИмяФайлаСообщенийПлатформы(ЛогАгента);

	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыАгента.ВерсияПлатформы) Тогда

		Конфигуратор.ПолучитьПутьКВерсииПлатформы(ПараметрыАгента.ВерсияПлатформы);

	КонецЕсли;

	Конфигуратор.УстановитьКонтекст(
		ПараметрыАгента.СтрокаПодключения, 
		ПараметрыАвторизации.Пользователь, 
		ПараметрыАвторизации.Пароль);

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/AgentMode");

	Если ЗначениеЗаполнено(ПараметрыАгента.БазовыйКаталог) Тогда

		ФС.ОбеспечитьКаталог(ПараметрыАгента.БазовыйКаталог);
		ПараметрыЗапуска.Добавить("/AgentBaseDir");
		ПараметрыЗапуска.Добавить(Утилиты.ЭкранироватьПуть(ПараметрыАгента.БазовыйКаталог));

	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыАгента.Адрес) Тогда

		ПараметрыЗапуска.Добавить("/AgentListenAddress");
		ПараметрыЗапуска.Добавить(Утилиты.ОбернутьВКавычки(ПараметрыАгента.Адрес));

	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыАгента.Порт) Тогда

		ПараметрыЗапуска.Добавить("/AgentPort");
		ПараметрыЗапуска.Добавить(Формат(ПараметрыАгента.Порт, "ЧГ=0"));

	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыАгента.КлючSSH) Тогда

		ПараметрыЗапуска.Добавить("/AgentSSHHostKey");
		ПараметрыЗапуска.Добавить(Утилиты.ОбернутьВКавычки(ПараметрыАгента.КлючSSH));

	Иначе

		ПараметрыЗапуска.Добавить("/AgentSSHHostKeyAuto");

	КонецЕсли;
	
	Успех = Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска) = 0;

	Утилиты.Пауза(3);

	ТекстЛога = Утилиты.ПрочитатьФайлЛога(ЛогАгента);
	
	Если ПустаяСтрока(ТекстЛога) Тогда
		
		Возврат Успех;

	КонецЕсли;

	Успех = Успех И НЕ СтрНайти(НРег(ТекстЛога), "ошибк");

	
	Если Успех Тогда

		Лог.Информация(ТекстЛога);

	Иначе

		Лог.Ошибка(ТекстЛога);

	КонецЕсли;

	Возврат Успех;

КонецФункции

Функция Подключиться() Экспорт

	ПолучитьСоединение();
	
	Результат = ПодключитьсяКИБ();

	ФС.ОбеспечитьПустойКаталог(РабочийКаталог());
	
	Возврат Результат;
	
КонецФункции

Функция Отключиться() Экспорт

	Результат = ОтключитьсяОтИБ();
	
	ПотокSSH.Разорвать();
	ПотокSSH = Неопределено;
	КлиентSSH = Неопределено;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПараметрыАгента

Функция РабочийКаталог() Экспорт

	Возврат	ОбъединитьПути(ПараметрыАгента.БазовыйКаталог, ПараметрыАвторизации.Пользователь);

КонецФункции

Функция Подключен() Экспорт

	Возврат ПотокSSH <> Неопределено;

КонецФункции

#КонецОбласти

#Область КомандыАгента

Функция Версия() Экспорт

	Команда = "--version";

	Результат = ВыполнитьКомандуАгент(Команда, "Версия агента");

	Если Результат.Успешно Тогда

		Возврат Результат.Данные;

	Иначе

		Возврат "";

	КонецЕсли;
	
КонецФункции

Функция ПодключитьсяКИБ() Экспорт

	Команда = "common connect-ib";

	Результат = ВыполнитьКомандуАгент(Команда, "Подключиться к информационной базе");

	Возврат Результат.Успешно;
	
КонецФункции

Функция ОтключитьсяОтИБ() Экспорт

	Команда = "common disconnect-ib";

	Результат = ВыполнитьКомандуАгент(Команда, "Отключиться от информационной базы");
	
	Возврат Результат.Успешно;

КонецФункции

Функция ЗавершитьРаботуАгента() Экспорт

	Команда = "common shutdown";

	Возврат ВыполнитьКомандуАгент("common shutdown", "Завершение работы агента", Ложь);

КонецФункции

Функция УстановитьЗначениеНастройки(Ключ, Значение, Описание) Экспорт

	Команда = СтрШаблон("options set --%1=%2", Ключ, Значение);

	Возврат ВыполнитьКомандуАгент(Команда, "Настройка " + Описание);

КонецФункции

Функция ПолучитьЗначениеНастройки(Ключ) Экспорт

	Команда = СтрШаблон("options get --%1", Ключ);

	Возврат ВыполнитьКомандуАгент(Команда, "Получить значение натсройки " + Ключ);

КонецФункции

Функция ПолучитьСписокНастроек() Экспорт

	Команда = "options list";

	Возврат ВыполнитьКомандуАгент(Команда, "Список значений всех настроек");

КонецФункции

Функция ВыгрузитьКонфигурациюXML() Экспорт

// 	--dir=<path>
// 	(обязательный) Путь

// --extension=<extension name>
// 	Имя расширения

// --all-extensions
// 	Все расширения

// --format=<hierarchical|plain>
// 	Формат выгрузки файлов

// --update
// 	Обновить выгрузку (будут выгружены только файлы с версиями, отличающимися от  версий в файле ConfigDumpInfo.xml)

// --get-changes=<path>
// 	Вывести в указанный файл изменения в текущей конфигурации относительно указанного файла версий

// --config-dump-info-for-changes=<path>
// 	Файл версий, используемый для вычисления дельты изменений

// --force
// 	Выполнить полную выгрузку, если при попытке обновления выгрузки выяснилось, что текущая версия формата выгрузки не совпадает с версией формата, записанной в файл ConfigDumpInfo.xml.

// --list-file=<path>
// 	Файл, в котором перечислены файлы, которые требуется загрузить. Не используется, если указана опция files
	Команда = "config dump-config-to-files";

	Возврат ВыполнитьКомандуАгент(Команда, "Выгрузить конфигурацию в XML-файлы");

КонецФункции

Функция ЗагрузитьКонфигурациюXML() Экспорт

// 	--dir=<path>
// 	(обязательный) Путь

// --extension=<extension name>
// 	Имя расширения

// --all-extensions
// 	Все расширения

// --files=<files>
// 	Список файлов, которые требуется загрузить. Список разделяется запятыми. Не используется, если указана опция list-file

// --list-file=<path>
// 	Файл, в котором перечислены файлы, которые требуется загрузить. Не используется, если указана опция files

// --format=<hierarchical|plain>
// 	Формат выгрузки файлов

// --update-config-dump-info
// 	В конце загрузки в каталоге будет создан файл ConfigDumpInfo.xml, соответствующий загруженной конфигурации.
	Команда = "config load-config-from-files";

	Возврат ВыполнитьКомандуАгент(Команда, "Загрузить конфигурацию из XML-файлов");

КонецФункции

Функция ЗагрузитьВнешнююОбработкуXML() Экспорт

// 	--file=<file>
// 	(обязательный) Путь к корневому файлу выгрузки, в который будут сохранены файлы в формате xml внешней обработки или отчета

// --ext-file=<file>
// 	(обязательный) Путь к файлу внешней обработки (.epf) или отчета (.erf)

	Команда = "config load-external-data-processor-or-report-from-files";

	Возврат ВыполнитьКомандуАгент(Команда, "Загрузить внешнюю обработку или отчет из XML-файлов");

КонецФункции

Функция ВыгрузитьВнешнуюОбработкуВXML(
	Знач ИмяФайлаОбработки, 
	Знач КаталогПриемник = ".", 
	Знач Формат = "hierarchical") Экспорт

	Файл = Новый Файл(ИмяФайлаОбработки);

	Если НЕ Файл.Существует() Тогда

		Лог.Ошибка("Не найден файл '%1'", ИмяФайлаОбработки);
		Возврат Ложь;

	КонецЕсли;

	ИмяФайлаВыгрузки = ОбъединитьПути(КаталогПриемник, Файл.ИмяБезРасширения);

	Команда = СтрШаблон("config dump-ext-files --file=%1 --ext-file=%2 --format=%3", 
		Утилиты.ЭкранироватьПуть(ИмяФайлаВыгрузки),
		Утилиты.ЭкранироватьПуть(ИмяФайлаОбработки),
		Формат);
	
	Результат = ВыполнитьКомандуАгент(Команда, "Выгрузка внешней обработки в XML");

	Возврат Результат.Успешно;

КонецФункции

Функция ОбновитьКонфигурациюБД() Экспорт

// 	--dynamic-enable
// 	Сначала выполняется попытка динамического обновления, если она завершена неудачно, будет запущено фоновое обновление. Значение используется по умолчанию

// --dynamic-disable
// 	Динамическое обновление запрещено

// --warnings-as-errors
// 	Все предупредительные сообщения будут трактоваться как ошибки

// --prompt-confirmation
// 	Спрашивать у пользователя подтверждение о принятии изменений при реструктуризации

// --background-start
// 	Будет запущено фоновое обновление конфигурации, текущий сеанс будет завершен

// --background-cancel
// 	Отменяет запущенное фоновое обновление конфигурации базы данных

// --background-finish
// 	Запущенное фоновое обновление конфигурации базы данных будет завершено: при этом будет наложена монопольная блокировка и проведена финальная фаза обновления

// --background-suspend
// 	Приостанавливает фоновое обновление конфигурации на паузу. Если фоновое обновление не запущено, будет выдана ошибка

// --background-resume
// 	Продолжает фоновое обновление конфигурации базы данных, приостановленное ранее

// --server
// 	Обновление будет выполняться на сервере

// --extension=<extension name>
// 	Имя расширения
	Команда = "config update-db-cfg";

	Возврат ВыполнитьКомандуАгент(Команда, "Обновить конфигурацию базы данных");

КонецФункции

Функция ПолучитьСписокРазделителейИБ() Экспорт

	Команда = "infobase-tools data-separation-common-attributes-list";

	Возврат ВыполнитьКомандуАгент(Команда, "Вывести список разделителей информационной базы");

КонецФункции

Функция ПолучитьНастройкиОтладчика() Экспорт

	Команда = "infobase-tools debug-info";

	Возврат ВыполнитьКомандуАгент(Команда, "Показать настройки отладчика");

КонецФункции

Функция ВыполнитьКомандуАгент(Команда, Описание, ОбязательноПодтверждениеВыполнения = Истина) Экспорт

	Лог.Отладка("Команда агента. %1", Команда);

	ОтветноеСообщение = ПотокSSH.ЗаписатьВПоток(Команда);
	Лог.Отладка("Ответ агента. %1", ОтветноеСообщение);

	Результат = ОбработатьОтветАгента(ОтветноеСообщение, ОбязательноПодтверждениеВыполнения);

	Если НЕ Результат.Успешно Тогда

		Лог.Информация("===========================================");
		Лог.Информация("Не удалось выполнить операцию: %1", Описание);
		Лог.Отладка("Текст команды агента: %1", Команда);

	КонецЕсли;

	Для Каждого Сообщение Из Результат.Сообщения Цикл

		ТекстСообщения = СтрЗаменить(Сообщение.Текст, Символы.ПС, Символы.ПС + Символы.Таб + Символы.Таб);

		Если Сообщение.Тип = "error" Тогда

			Лог.Ошибка("%1. %2", Сообщение.ТипОшибки, ТекстСообщения);

		ИначеЕсли ЗначениеЗаполнено(ТекстСообщения) Тогда

			Лог.Информация(ТекстСообщения);

		КонецЕсли;

	КонецЦикла;

	Если НЕ Результат.Успешно Тогда

		Лог.Информация("===========================================");
	
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Служебные

Функция ПолучитьСоединение()

	Если ПотокSSH <> Неопределено Тогда

		Возврат ПотокSSH;

	КонецЕсли;

	КлиентSSH = Новый КлиентSSH(ПараметрыАгента.Адрес, 
		ПараметрыАгента.Порт, 
		ПараметрыАвторизации.Пользователь, 
		ПараметрыАвторизации.Пароль);
	ПотокSSH = КлиентSSH.ПолучитьПоток();

	УстановитьЗначениеНастройки("show-prompt", "no", "Отключить приглашение командной строки");
	УстановитьЗначениеНастройки("output-format", "json", "Вывод в формате JSON");
	
	Возврат ПотокSSH;

КонецФункции

Функция ОбработатьОтветАгента(ОтветАгента, ОбязательноПодтверждениеВыполнения)

	Результат = Новый Структура("Успешно, Сообщения", Неопределено, Новый Массив());
	
	// В случае еще не установленного формата вывода
	Если ОтветАгента = "Операция завершена успешно" Тогда

		Результат.Успешно = Истина;
		Возврат Результат;

	КонецЕсли;

	Чтение = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку(ОтветАгента);
	
	Попытка

		Сообщения = ПрочитатьJSON(Чтение, Истина);

	Исключение

		Результат.Успешно = Ложь;
		Ключи = "Тип, Текст, ТипОшибки";
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		Результат.Сообщения.Добавить(Новый Структура(Ключи, "error", "Ошибка разбора ответа", "Разбор ответа"));
		Результат.Сообщения.Добавить(Новый Структура(Ключи, "error", ТекстОшибки, "Разбор ответа"));
		Результат.Сообщения.Добавить(Новый Структура("Тип, Текст", "log", ОтветАгента));

		Возврат Результат;

	КонецПопытки;

	Чтение.Закрыть();

	Результат.Сообщения = Новый Массив();

	Для Каждого Сообщение Из Сообщения Цикл

		НомализованноеСообщение = Новый Структура("Тип, Текст");
		ТипСообщения = Сообщение["type"];

		НомализованноеСообщение.Тип = ТипСообщения;
		НомализованноеСообщение.Текст = Сообщение["message"];

		Если ТипСообщения = "error" Тогда

			Результат.Успешно = Ложь;
			НомализованноеСообщение.Вставить("ТипОшибки", Сообщение["error-type"]);

		ИначеЕсли ТипСообщения = "success" Тогда

			Результат.Успешно = Истина;

			Если Сообщение["body"] <> Неопределено Тогда

				Результат.Вставить("Данные", Сообщение["body"]);

			КонецЕсли;

		ИначеЕсли ТипСообщения <> "log" Тогда

			Лог.Информация("Получен неизвестный тип сообщения лога агента. %1", ТипСообщения);
			Лог.Информация("Полный тест полученных сообщений агента. %1", ОтветАгента);

		КонецЕсли;

		Результат.Сообщения.Добавить(НомализованноеСообщение);

	КонецЦикла;

	Если Результат.Успешно = Неопределено Тогда

		Если ОбязательноПодтверждениеВыполнения Тогда

			Лог.Предупреждение("Не получили от агента статус выполнения");
			Результат.Успешно = Ложь;

		Иначе

			Результат.Успешно = Истина;

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти