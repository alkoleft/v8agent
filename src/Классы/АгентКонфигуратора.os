#Использовать clientSSH
#Использовать v8runner
#Использовать fs

Перем Конфигуратор;
Перем ПараметрыАгента;
Перем ПараметрыАвторизации;
Перем ЛогАгента;

Перем КлиентSSH;
Перем ПотокSSH;
Перем Лог;
Перем ПараметрыРаботы;

Процедура ПриСозданииОбъекта()

	Лог = МенеджерПакета.ПолучитьЛог();

	ПараметрыРаботы = Новый Структура();

	ЛогАгента = ПолучитьИмяВременногоФайла();

	Конфигуратор = Новый УправлениеКонфигуратором();
	Конфигуратор.УстановитьПризнакОжиданияВыполненияПрограммы(Ложь);
	Конфигуратор.УстановитьИмяФайлаСообщенийПлатформы(ЛогАгента);

	ПараметрыАгента = Новый Структура("Адрес, Порт, БазовыйКаталог, КлючSSH", "127.0.0.1", 1543);
	ПараметрыАвторизации = Новый Структура("Пользователь, Пароль");

КонецПроцедуры

#Область Настройка

Процедура УстановитьПараметрыБазыДанных(Знач СтрокаСоединения, Знач Пользователь, Знач Пароль) Экспорт

	Конфигуратор.УстановитьКонтекст(СтрокаСоединения, Пользователь, Пароль);
	УстановитьПараметрыАвторизации(Пользователь, Пароль);

КонецПроцедуры

Процедура УстановитьПараметрыАвторизации(Знач Пользователь, Знач Пароль) Экспорт

	ПараметрыАвторизации.Пользователь = Пользователь;
	ПараметрыАвторизации.Пароль = Пароль;
	
КонецПроцедуры

Процедура УстановитьПараметрыАгента(Знач БазовыйКаталог = "", Знач Адрес = "127.0.0.1", Знач Порт = 1543) Экспорт

	Если ПустаяСтрока(БазовыйКаталог) Тогда

		ПараметрыАгента.БазовыйКаталог = ТекущийКаталог();

	Иначе

		ПараметрыАгента.БазовыйКаталог = БазовыйКаталог;

	КонецЕсли;

	ПараметрыАгента.Адрес = Адрес;
	ПараметрыАгента.Порт = Порт;

КонецПроцедуры

#КонецОбласти

#Область УправлениеАгентом

Функция Запустить() Экспорт

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/AgentMode");

	Если ЗначениеЗаполнено(ПараметрыАгента.БазовыйКаталог) Тогда

		ФС.ОбеспечитьКаталог(ПараметрыАгента.БазовыйКаталог);
		ПараметрыЗапуска.Добавить("/AgentBaseDir");
		ПараметрыЗапуска.Добавить(Утилиты.ЭкранироватьПуть(ПараметрыАгента.БазовыйКаталог));

	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыАгента.Адрес) Тогда

		ПараметрыЗапуска.Добавить("/AgentListenAddress");
		ПараметрыЗапуска.Добавить(Утилиты.ОбернутьВКавычки(ПараметрыАгента.Адрес));

	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыАгента.Порт) Тогда

		ПараметрыЗапуска.Добавить("/AgentPort");
		ПараметрыЗапуска.Добавить(Формат(ПараметрыАгента.Порт, "ЧГ=0"));

	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыАгента.КлючSSH) Тогда

		ПараметрыЗапуска.Добавить("/AgentSSHHostKey");
		ПараметрыЗапуска.Добавить(Утилиты.ОбернутьВКавычки(ПараметрыАгента.КлючSSH));

	Иначе

		ПараметрыЗапуска.Добавить("/AgentSSHHostKeyAuto");

	КонецЕсли;
	
	Успех = Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска) = 0;

	Утилиты.Пауза(3);

	ТекстЛога = Утилиты.ПрочитатьФайлЛога(ЛогАгента);
	
	Если ПустаяСтрока(ТекстЛога) Тогда
		
		Возврат Успех;

	КонецЕсли;

	Успех = Успех И НЕ СтрНайти(НРег(ТекстЛога), "ошибк");

	
	Если Успех Тогда

		Лог.Информация(ТекстЛога);

	Иначе

		Лог.Ошибка(ТекстЛога);

	КонецЕсли;

	Возврат Успех;

КонецФункции

Функция Подключиться() Экспорт

	Результат = ВыполнитьКомандуАгент("common connect-ib", "Подключение к ИБ");

	ФС.ОбеспечитьПустойКаталог(РабочийКаталог());
	
	Возврат Результат.Успешно;
	
КонецФункции

Функция Отключиться() Экспорт

	Результат = ВыполнитьКомандуАгент("common disconnect-ib", "Отключение от ИБ");

	Возврат Результат.Успешно;
	
КонецФункции

Функция ЗавершитьРаботуАгента() Экспорт

	Результат = ВыполнитьКомандуАгент("common shutdown", "Выключение агента");

	Возврат Результат.Успешно;

КонецФункции

#КонецОбласти

#Область ПараметрыАгента

Функция РабочийКаталог() Экспорт

	Возврат	ОбъединитьПути(ПараметрыАгента.БазовыйКаталог, ПараметрыАвторизации.Пользователь);

КонецФункции

#КонецОбласти

#Область КомандыАгента

Функция ВыполнитьКомандуАгент(Команда, Описание) Экспорт

	Поток = ПолучитьСоединение();

	Лог.Отладка("Команда агента. %1", Команда);

	ОтветноеСообщение = Поток.ЗаписатьВПоток(Команда);
	Лог.Отладка("Ответ агента. %1", ОтветноеСообщение);

	Результат = ОбработатьОтветАгента(ОтветноеСообщение);

	Если НЕ Результат.Успешно Тогда

		Лог.Ошибка("Ошибка выполненеия операции: %1", Описание);
		Лог.Информация("Текст команды агента: %1", Команда);

	КонецЕсли;

	Для Каждого Сообщение Из Результат.Сообщения Цикл

		ТекстСообщения = СтрЗаменить(Сообщение.Текст, Символы.ПС, Символы.ПС + Символы.Таб + Символы.Таб);

		Если Сообщение.Тип = "error" Тогда

			Лог.Ошибка("%1. %2", Сообщение.ТипОшибки, ТекстСообщения);

		ИначеЕсли ЗначениеЗаполнено(ТекстСообщения) Тогда

			Лог.Информация(ТекстСообщения);

		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ВыгрузитьВнешнуюОбработкуВXML(
	Знач ИмяФайлаОбработки, 
	Знач КаталогПриемник = ".", 
	Знач Формат = "hierarchical") Экспорт

	Файл = Новый Файл(ИмяФайлаОбработки);

	Если НЕ Файл.Существует() Тогда

		Лог.Ошибка("Не найден файл '%1'", ИмяФайлаОбработки);

	КонецЕсли;

	ИмяФайлаВыгрузки = ОбъединитьПути(КаталогПриемник, Файл.ИмяБезРасширения);

	Команда = СтрШаблон("config dump-ext-files --file=%1 --ext-file=%2 --format=%3", 
		Утилиты.ЭкранироватьПуть(ИмяФайлаВыгрузки),
		Утилиты.ЭкранироватьПуть(ИмяФайлаОбработки),
		Формат);
	
	Результат = ВыполнитьКомандуАгент(Команда, "Выгрузка внешней обработки в XML");

	Возврат Результат.Успешно;

КонецФункции

#КонецОбласти

#Область Служебные

Функция ПолучитьСоединение()

	Если ПотокSSH <> Неопределено Тогда

		Возврат ПотокSSH;

	КонецЕсли;

	КлиентSSH = Новый КлиентSSH(ПараметрыАгента.Адрес, 
		ПараметрыАгента.Порт, 
		ПараметрыАвторизации.Пользователь, 
		ПараметрыАвторизации.Пароль);
	ПотокSSH = КлиентSSH.ПолучитьПоток();

	Результат = ВыполнитьКомандуАгент("options set --show-prompt=no --output-format=json", "Инициализация соединения");

	Возврат ПотокSSH;

КонецФункции

Функция ОбработатьОтветАгента(ОтветАгента)

	Результат = Новый Структура("Успешно, Сообщения", Неопределено, Новый Массив());
	
	Чтение = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку(ОтветАгента);
	
	Сообщения = ПрочитатьJSON(Чтение, Истина);

	Чтение.Закрыть();

	Результат.Сообщения = Новый Массив();

	Для Каждого Сообщение Из Сообщения Цикл

		НомализованноеСообщение = Новый Структура("Тип, Текст");
		ТипСообщения = Сообщение["type"];

		НомализованноеСообщение.Тип = ТипСообщения;
		НомализованноеСообщение.Текст = Сообщение["message"];

		Если ТипСообщения = "error" Тогда

			Результат.Успешно = Ложь;
			НомализованноеСообщение.Вставить("ТипОшибки", Сообщение["error-type"]);

		ИначеЕсли ТипСообщения = "success" Тогда

			Результат.Успешно = Истина;

		ИначеЕсли ТипСообщения <> "log" Тогда

			Лог.Информация("Получен неизвестный тип сообщения лога агента. %1", ТипСообщения);
			Лог.Информация("Полный тест полученных сообщений агента. %1", ОтветАгента);

		КонецЕсли;

		Результат.Сообщения.Добавить(НомализованноеСообщение);

	КонецЦикла;

	Если Результат.Успешно = Неопределено Тогда

		Лог.Предупреждение("Не получили от агента статус выполнения");
		Результат.Успешно = Ложь;

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти